Sistema operativo utilizado
Linux debian11mate 5.10.0-16-amd64 #1 SMP Debian 5.10.127-2 (2022-07-23) x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin-san
./integral.bin-san
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6669
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6674
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6669
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6674
Calculando en paralelo hasta 1 veces
integral en [-0.200000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6669
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6674
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6669
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6674
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6669
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6674
Calculando en paralelo hasta 1 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2433, speedup= 2.743115
Felicitaciones: Su tarea funciona.
==== run-g ====
gcc -g -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin-g
./integral.bin-g
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6554
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6464
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6554
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6464
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6554
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6464
Calculando en paralelo hasta 1 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6554
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6464
Calculando en paralelo hasta 1 veces
integral en [-0.200000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6554
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 6464
Calculando en paralelo hasta 1 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 2140, speedup= 3.020561
Felicitaciones: Su tarea funciona.
==== run ====
gcc -O -DOPT=1 -Wall -Werror -std=c18 -Wno-unused-function  test-integral.c integral.c -lm -lpthread -o integral.bin
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4315
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4323
Calculando en paralelo hasta 4 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4315
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4323
Calculando en paralelo hasta 4 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4315
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4323
Calculando en paralelo hasta 4 veces
integral en [-0.200000,-0.200000] con 5000 intervalos= -0.000000
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4315
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4323
Calculando en paralelo hasta 4 veces
integral en [-0.200000,0.600000] con 5000 intervalos= 0.214813
Calculando secuencialmente 2 veces
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4315
integral en [-0.200000,0.600000] con 20000 intervalos= 0.214813
integral= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 4323
Calculando en paralelo hasta 4 veces
integral par= 0.214813, valor esperado= 0.214813, error= 0.000000, tiempo= 1594, speedup= 2.712045
Felicitaciones: el speedup es mejor que 1.7x.  Su tarea funciona.
